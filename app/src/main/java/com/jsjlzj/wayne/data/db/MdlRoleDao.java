package com.jsjlzj.wayne.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.jsjlzj.wayne.entity.dao.MdlRole;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
public class MdlRoleDao extends AbstractDao<MdlRole, Long> {

    public static final String TABLENAME = "MDL_ROLE";

    /**
     * Properties of entity MdlRole.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property RoleName = new Property(1, String.class, "roleName", false, "ROLE_NAME");
        public final static Property Createtime = new Property(2, long.class, "createtime", false, "CREATETIME");
    }


    public MdlRoleDao(DaoConfig config) {
        super(config);
    }
    
    public MdlRoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MDL_ROLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ROLE_NAME\" TEXT," + // 1: roleName
                "\"CREATETIME\" INTEGER NOT NULL );"); // 2: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MDL_ROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MdlRole entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(2, roleName);
        }
        stmt.bindLong(3, entity.getCreatetime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MdlRole entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(2, roleName);
        }
        stmt.bindLong(3, entity.getCreatetime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MdlRole readEntity(Cursor cursor, int offset) {
        MdlRole entity = new MdlRole( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // roleName
            cursor.getLong(offset + 2) // createtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MdlRole entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRoleName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreatetime(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MdlRole entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MdlRole entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MdlRole entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
